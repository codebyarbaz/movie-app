{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\hp\\\\Downloads\\\\movies\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { ExternalInteractorBase, drawLine, gradient, isInArray } from \"tsparticles-engine\";\n\nfunction drawConnectLine(context, width, lineStyle, begin, end) {\n  context.save();\n  drawLine(context, begin, end);\n  context.lineWidth = width;\n  context.strokeStyle = lineStyle;\n  context.stroke();\n  context.restore();\n}\n\nfunction lineStyle(container, ctx, p1, p2) {\n  var options = container.actualOptions,\n      connectOptions = options.interactivity.modes.connect;\n  return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\n\nfunction drawConnection(container, p1, p2) {\n  container.canvas.draw(function (ctx) {\n    var _a;\n\n    var ls = lineStyle(container, ctx, p1, p2);\n\n    if (!ls) {\n      return;\n    }\n\n    var pos1 = p1.getPosition(),\n        pos2 = p2.getPosition();\n    drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, ls, pos1, pos2);\n  });\n}\n\nexport var Connector = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Connector, _ExternalInteractorBa);\n\n  var _super = _createSuper(Connector);\n\n  function Connector(container) {\n    _classCallCheck(this, Connector);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Connector, [{\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _a;\n\n      var container = this.container,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      return isInArray(\"connect\", events.onHover.mode);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {}\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var container, options, mousePos, distance, query, i, _iterator, _step, p1, pos1, _iterator2, _step2, p2, pos2, distMax, xDiff, yDiff;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions;\n\n                if (!(options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\")) {\n                  _context.next = 9;\n                  break;\n                }\n\n                mousePos = container.interactivity.mouse.position;\n\n                if (mousePos) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, function (p) {\n                  return _this.isEnabled(p);\n                });\n                i = 0;\n                _iterator = _createForOfIteratorHelper(query);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    p1 = _step.value;\n                    pos1 = p1.getPosition();\n                    _iterator2 = _createForOfIteratorHelper(query.slice(i + 1));\n\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        p2 = _step2.value;\n                        pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n\n                        if (xDiff < distMax && yDiff < distMax) {\n                          drawConnection(container, p1, p2);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n\n                    ++i;\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }]);\n\n  return Connector;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-interaction-external-connect/esm/Connector.js"],"names":["ExternalInteractorBase","drawLine","gradient","isInArray","drawConnectLine","context","width","lineStyle","begin","end","save","lineWidth","strokeStyle","stroke","restore","container","ctx","p1","p2","options","actualOptions","connectOptions","interactivity","modes","connect","links","opacity","drawConnection","canvas","draw","_a","ls","pos1","getPosition","pos2","retina","linksWidth","Connector","particle","mouse","events","onHover","enable","position","mode","status","mousePos","distance","Math","abs","connectModeRadius","query","particles","quadTree","queryCircle","p","isEnabled","i","slice","distMax","connectModeDistance","xDiff","x","yDiff","y"],"mappings":";;;;;;;AAAA,SAASA,sBAAT,EAAiCC,QAAjC,EAA2CC,QAA3C,EAAqDC,SAArD,QAAsE,oBAAtE;;AACA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,KAAlC,EAAyCC,SAAzC,EAAoDC,KAApD,EAA2DC,GAA3D,EAAgE;AAC5DJ,EAAAA,OAAO,CAACK,IAAR;AACAT,EAAAA,QAAQ,CAACI,OAAD,EAAUG,KAAV,EAAiBC,GAAjB,CAAR;AACAJ,EAAAA,OAAO,CAACM,SAAR,GAAoBL,KAApB;AACAD,EAAAA,OAAO,CAACO,WAAR,GAAsBL,SAAtB;AACAF,EAAAA,OAAO,CAACQ,MAAR;AACAR,EAAAA,OAAO,CAACS,OAAR;AACH;;AACD,SAASP,SAAT,CAAmBQ,SAAnB,EAA8BC,GAA9B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2C;AACvC,MAAMC,OAAO,GAAGJ,SAAS,CAACK,aAA1B;AAAA,MAAyCC,cAAc,GAAGF,OAAO,CAACG,aAAR,CAAsBC,KAAtB,CAA4BC,OAAtF;AACA,SAAOtB,QAAQ,CAACc,GAAD,EAAMC,EAAN,EAAUC,EAAV,EAAcG,cAAc,CAACI,KAAf,CAAqBC,OAAnC,CAAf;AACH;;AACD,SAASC,cAAT,CAAwBZ,SAAxB,EAAmCE,EAAnC,EAAuCC,EAAvC,EAA2C;AACvCH,EAAAA,SAAS,CAACa,MAAV,CAAiBC,IAAjB,CAAsB,UAACb,GAAD,EAAS;AAC3B,QAAIc,EAAJ;;AACA,QAAMC,EAAE,GAAGxB,SAAS,CAACQ,SAAD,EAAYC,GAAZ,EAAiBC,EAAjB,EAAqBC,EAArB,CAApB;;AACA,QAAI,CAACa,EAAL,EAAS;AACL;AACH;;AACD,QAAMC,IAAI,GAAGf,EAAE,CAACgB,WAAH,EAAb;AAAA,QAA+BC,IAAI,GAAGhB,EAAE,CAACe,WAAH,EAAtC;AACA7B,IAAAA,eAAe,CAACY,GAAD,EAAM,CAACc,EAAE,GAAGb,EAAE,CAACkB,MAAH,CAAUC,UAAhB,MAAgC,IAAhC,IAAwCN,EAAE,KAAK,KAAK,CAApD,GAAwDA,EAAxD,GAA6Df,SAAS,CAACoB,MAAV,CAAiBC,UAApF,EAAgGL,EAAhG,EAAoGC,IAApG,EAA0GE,IAA1G,CAAf;AACH,GARD;AASH;;AACD,WAAaG,SAAb;AAAA;;AAAA;;AACI,qBAAYtB,SAAZ,EAAuB;AAAA;;AAAA,6BACbA,SADa;AAEtB;;AAHL;AAAA;AAAA,WAII,mBAAUuB,QAAV,EAAoB;AAChB,UAAIR,EAAJ;;AACA,UAAMf,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCwB,KAAK,GAAGxB,SAAS,CAACO,aAAV,CAAwBiB,KAAlE;AAAA,UAAyEC,MAAM,GAAG,CAAC,CAACV,EAAE,GAAGQ,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAChB,aAAnE,MAAsF,IAAtF,IAA8FQ,EAAE,KAAK,KAAK,CAA1G,GAA8GA,EAA9G,GAAmHf,SAAS,CAACK,aAAV,CAAwBE,aAA5I,EAA2JkB,MAA7O;;AACA,UAAI,EAAEA,MAAM,CAACC,OAAP,CAAeC,MAAf,IAAyBH,KAAK,CAACI,QAAjC,CAAJ,EAAgD;AAC5C,eAAO,KAAP;AACH;;AACD,aAAOxC,SAAS,CAAC,SAAD,EAAYqC,MAAM,CAACC,OAAP,CAAeG,IAA3B,CAAhB;AACH;AAXL;AAAA;AAAA,WAYI,iBAAQ,CACP;AAbL;AAAA;AAAA,WAcI,iBAAQ,CACP;AAfL;AAAA;AAAA;AAAA,+EAgBI;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACU7B,gBAAAA,SADV,GACsB,KAAKA,SAD3B,EACsCI,OADtC,GACgDJ,SAAS,CAACK,aAD1D;;AAAA,sBAEQD,OAAO,CAACG,aAAR,CAAsBkB,MAAtB,CAA6BC,OAA7B,CAAqCC,MAArC,IAA+C3B,SAAS,CAACO,aAAV,CAAwBuB,MAAxB,KAAmC,WAF1F;AAAA;AAAA;AAAA;;AAGcC,gBAAAA,QAHd,GAGyB/B,SAAS,CAACO,aAAV,CAAwBiB,KAAxB,CAA8BI,QAHvD;;AAAA,oBAIaG,QAJb;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOcC,gBAAAA,QAPd,GAOyBC,IAAI,CAACC,GAAL,CAASlC,SAAS,CAACoB,MAAV,CAAiBe,iBAA1B,CAPzB,EAOuEC,KAPvE,GAO+EpC,SAAS,CAACqC,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCR,QAAzC,EAAmDC,QAAnD,EAA6D,UAACQ,CAAD;AAAA,yBAAO,KAAI,CAACC,SAAL,CAAeD,CAAf,CAAP;AAAA,iBAA7D,CAP/E;AAQYE,gBAAAA,CARZ,GAQgB,CARhB;AAAA,uDASyBN,KATzB;;AAAA;AASQ,sEAAwB;AAAblC,oBAAAA,EAAa;AACde,oBAAAA,IADc,GACPf,EAAE,CAACgB,WAAH,EADO;AAAA,4DAEHkB,KAAK,CAACO,KAAN,CAAYD,CAAC,GAAG,CAAhB,CAFG;;AAAA;AAEpB,6EAAqC;AAA1BvC,wBAAAA,EAA0B;AAC3BgB,wBAAAA,IAD2B,GACpBhB,EAAE,CAACe,WAAH,EADoB,EACF0B,OADE,GACQX,IAAI,CAACC,GAAL,CAASlC,SAAS,CAACoB,MAAV,CAAiByB,mBAA1B,CADR,EACwDC,KADxD,GACgEb,IAAI,CAACC,GAAL,CAASjB,IAAI,CAAC8B,CAAL,GAAS5B,IAAI,CAAC4B,CAAvB,CADhE,EAC2FC,KAD3F,GACmGf,IAAI,CAACC,GAAL,CAASjB,IAAI,CAACgC,CAAL,GAAS9B,IAAI,CAAC8B,CAAvB,CADnG;;AAEjC,4BAAIH,KAAK,GAAGF,OAAR,IAAmBI,KAAK,GAAGJ,OAA/B,EAAwC;AACpChC,0BAAAA,cAAc,CAACZ,SAAD,EAAYE,EAAZ,EAAgBC,EAAhB,CAAd;AACH;AACJ;AAPmB;AAAA;AAAA;AAAA;AAAA;;AAQpB,sBAAEuC,CAAF;AACH;AAlBT;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAhBJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAA+BzD,sBAA/B","sourcesContent":["import { ExternalInteractorBase, drawLine, gradient, isInArray } from \"tsparticles-engine\";\nfunction drawConnectLine(context, width, lineStyle, begin, end) {\n    context.save();\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n    context.restore();\n}\nfunction lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nfunction drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        var _a;\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, ls, pos1, pos2);\n    });\n}\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    clear() {\n    }\n    reset() {\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}