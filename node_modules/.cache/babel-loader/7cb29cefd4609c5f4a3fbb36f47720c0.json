{"ast":null,"code":"import { getRangeValue, getStyleFromHsl, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport class TwinkleUpdater {\n  getColorStyles(particle, context, radius, opacity) {\n    const pOptions = particle.options,\n          twinkleOptions = pOptions.twinkle;\n\n    if (!twinkleOptions) {\n      return {};\n    }\n\n    const twinkle = twinkleOptions.particles,\n          twinkling = twinkle.enable && Math.random() < twinkle.frequency,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n          twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity,\n          twinkleRgb = rangeColorToHsl(twinkle.color),\n          twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined,\n          res = {},\n          needsTwinkle = twinkling && twinkleStyle;\n    res.fill = needsTwinkle ? twinkleStyle : undefined;\n    res.stroke = needsTwinkle ? twinkleStyle : undefined;\n    return res;\n  }\n\n  init() {}\n\n  isEnabled(particle) {\n    const pOptions = particle.options,\n          twinkleOptions = pOptions.twinkle;\n\n    if (!twinkleOptions) {\n      return false;\n    }\n\n    return twinkleOptions.particles.enable;\n  }\n\n  update() {}\n\n  loadOptions(options) {\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      if (!(source === null || source === void 0 ? void 0 : source.twinkle)) {\n        continue;\n      }\n\n      if (!options.twinkle) {\n        options.twinkle = new Twinkle();\n      }\n\n      options.twinkle.load(source.twinkle);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-updater-twinkle/esm/TwinkleUpdater.js"],"names":["getRangeValue","getStyleFromHsl","rangeColorToHsl","Twinkle","TwinkleUpdater","getColorStyles","particle","context","radius","opacity","pOptions","options","twinkleOptions","twinkle","particles","twinkling","enable","Math","random","frequency","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","twinkleRgb","color","twinkleStyle","undefined","res","needsTwinkle","fill","stroke","init","isEnabled","update","loadOptions","sources","source","load"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,eAAxB,EAAyCC,eAAzC,QAAgE,oBAAhE;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,cAAc,CAACC,QAAD,EAAWC,OAAX,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AAC/C,UAAMC,QAAQ,GAAGJ,QAAQ,CAACK,OAA1B;AAAA,UAAmCC,cAAc,GAAGF,QAAQ,CAACG,OAA7D;;AACA,QAAI,CAACD,cAAL,EAAqB;AACjB,aAAO,EAAP;AACH;;AACD,UAAMC,OAAO,GAAGD,cAAc,CAACE,SAA/B;AAAA,UAA0CC,SAAS,GAAGF,OAAO,CAACG,MAAR,IAAkBC,IAAI,CAACC,MAAL,KAAgBL,OAAO,CAACM,SAAhG;AAAA,UAA2GC,aAAa,GAAGd,QAAQ,CAACK,OAAT,CAAiBU,MAA5I;AAAA,UAAoJC,cAAc,GAAG,CAAC,IAAIhB,QAAQ,CAACiB,YAAd,KAA+BH,aAAa,CAACI,WAAlN;AAAA,UAA+NC,gBAAgB,GAAGV,SAAS,GAAGf,aAAa,CAACa,OAAO,CAACJ,OAAT,CAAb,GAAiCa,cAApC,GAAqDb,OAAhT;AAAA,UAAyTiB,UAAU,GAAGxB,eAAe,CAACW,OAAO,CAACc,KAAT,CAArV;AAAA,UAAsWC,YAAY,GAAGF,UAAU,GAAGzB,eAAe,CAACyB,UAAD,EAAaD,gBAAb,CAAlB,GAAmDI,SAAlb;AAAA,UAA6bC,GAAG,GAAG,EAAnc;AAAA,UAAucC,YAAY,GAAGhB,SAAS,IAAIa,YAAne;AACAE,IAAAA,GAAG,CAACE,IAAJ,GAAWD,YAAY,GAAGH,YAAH,GAAkBC,SAAzC;AACAC,IAAAA,GAAG,CAACG,MAAJ,GAAaF,YAAY,GAAGH,YAAH,GAAkBC,SAA3C;AACA,WAAOC,GAAP;AACH;;AACDI,EAAAA,IAAI,GAAG,CACN;;AACDC,EAAAA,SAAS,CAAC7B,QAAD,EAAW;AAChB,UAAMI,QAAQ,GAAGJ,QAAQ,CAACK,OAA1B;AAAA,UAAmCC,cAAc,GAAGF,QAAQ,CAACG,OAA7D;;AACA,QAAI,CAACD,cAAL,EAAqB;AACjB,aAAO,KAAP;AACH;;AACD,WAAOA,cAAc,CAACE,SAAf,CAAyBE,MAAhC;AACH;;AACDoB,EAAAA,MAAM,GAAG,CACR;;AACDC,EAAAA,WAAW,CAAC1B,OAAD,EAAsB;AAAA,sCAAT2B,OAAS;AAATA,MAAAA,OAAS;AAAA;;AAC7B,SAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;AAC1B,UAAI,EAAEC,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC1B,OAAzD,CAAJ,EAAuE;AACnE;AACH;;AACD,UAAI,CAACF,OAAO,CAACE,OAAb,EAAsB;AAClBF,QAAAA,OAAO,CAACE,OAAR,GAAkB,IAAIV,OAAJ,EAAlB;AACH;;AACDQ,MAAAA,OAAO,CAACE,OAAR,CAAgB2B,IAAhB,CAAqBD,MAAM,CAAC1B,OAA5B;AACH;AACJ;;AAhCuB","sourcesContent":["import { getRangeValue, getStyleFromHsl, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && Math.random() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    update() {\n    }\n    loadOptions(options, ...sources) {\n        for (const source of sources) {\n            if (!(source === null || source === void 0 ? void 0 : source.twinkle)) {\n                continue;\n            }\n            if (!options.twinkle) {\n                options.twinkle = new Twinkle();\n            }\n            options.twinkle.load(source.twinkle);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}