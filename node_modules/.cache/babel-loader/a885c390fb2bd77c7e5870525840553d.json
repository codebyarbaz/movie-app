{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Circle } from \"./Circle\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport var QuadTree = /*#__PURE__*/function () {\n  function QuadTree(rectangle, capacity) {\n    _classCallCheck(this, QuadTree);\n\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n  }\n\n  _createClass(QuadTree, [{\n    key: \"insert\",\n    value: function insert(point) {\n      var _a, _b, _c, _d, _e;\n\n      if (!this.rectangle.contains(point.position)) {\n        return false;\n      }\n\n      if (this.points.length < this.capacity) {\n        this.points.push(point);\n        return true;\n      }\n\n      if (!this.divided) {\n        this.subdivide();\n      }\n\n      return (_e = ((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n    }\n  }, {\n    key: \"queryCircle\",\n    value: function queryCircle(position, radius, check) {\n      return this.query(new Circle(position.x, position.y, radius), check);\n    }\n  }, {\n    key: \"queryCircleWarp\",\n    value: function queryCircleWarp(position, radius, containerOrSize, check) {\n      var container = containerOrSize,\n          size = containerOrSize;\n      return this.query(new CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size), check);\n    }\n  }, {\n    key: \"queryRectangle\",\n    value: function queryRectangle(position, size, check) {\n      return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n  }, {\n    key: \"query\",\n    value: function query(range, check, found) {\n      var _a, _b, _c, _d;\n\n      var res = found !== null && found !== void 0 ? found : [];\n\n      if (!range.intersects(this.rectangle)) {\n        return [];\n      }\n\n      var _iterator = _createForOfIteratorHelper(this.points),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n\n          if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius() && (!check || check(p.particle))) {\n            continue;\n          }\n\n          res.push(p.particle);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.divided) {\n        (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, check, res);\n        (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, check, res);\n        (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, check, res);\n        (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, check, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"subdivide\",\n    value: function subdivide() {\n      var x = this.rectangle.position.x,\n          y = this.rectangle.position.y,\n          w = this.rectangle.size.width,\n          h = this.rectangle.size.height,\n          capacity = this.capacity;\n      this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n      this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n      this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n      this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n      this.divided = true;\n    }\n  }]);\n\n  return QuadTree;\n}();","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-engine/esm/Core/Utils/QuadTree.js"],"names":["Circle","CircleWarp","Rectangle","getDistance","QuadTree","rectangle","capacity","points","divided","point","_a","_b","_c","_d","_e","contains","position","length","push","subdivide","northEast","insert","northWest","southEast","southWest","radius","check","query","x","y","containerOrSize","container","size","canvas","undefined","width","height","range","found","res","intersects","p","particle","getRadius","w","h"],"mappings":"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","sourcesContent":["import { Circle } from \"./Circle\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this.points = [];\n        this.divided = false;\n    }\n    insert(point) {\n        var _a, _b, _c, _d, _e;\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this.points.length < this.capacity) {\n            this.points.push(point);\n            return true;\n        }\n        if (!this.divided) {\n            this.subdivide();\n        }\n        return ((_e = (((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) ||\n            ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) ||\n            ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) ||\n            ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point)))) !== null && _e !== void 0 ? _e : false);\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new Circle(position.x, position.y, radius), check);\n    }\n    queryCircleWarp(position, radius, containerOrSize, check) {\n        const container = containerOrSize, size = containerOrSize;\n        return this.query(new CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n    query(range, check, found) {\n        var _a, _b, _c, _d;\n        const res = found !== null && found !== void 0 ? found : [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this.points) {\n            if (!range.contains(p.position) &&\n                getDistance(range.position, p.position) > p.particle.getRadius() &&\n                (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this.divided) {\n            (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, check, res);\n            (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, check, res);\n            (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, check, res);\n            (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, check, res);\n        }\n        return res;\n    }\n    subdivide() {\n        const x = this.rectangle.position.x, y = this.rectangle.position.y, w = this.rectangle.size.width, h = this.rectangle.size.height, capacity = this.capacity;\n        this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n        this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n        this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n        this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n        this.divided = true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}