{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce } from \"tsparticles-engine\";\nexport class Bouncer extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n          divs = events.onDiv;\n    return mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode) || isDivModeEnabled(\"bounce\", divs);\n  }\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          events = options.interactivity.events,\n          mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          divs = events.onDiv;\n\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n      this.processMouseBounce();\n    } else {\n      divModeExecute(\"bounce\", divs, (selector, div) => this.singleSelectorBounce(selector, div));\n    }\n  }\n\n  clear() {}\n\n  reset() {}\n\n  processMouseBounce() {\n    const container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          tolerance = 10 * pxRatio,\n          mousePos = container.interactivity.mouse.position,\n          radius = container.retina.bounceModeDistance;\n\n    if (mousePos) {\n      this.processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n    }\n  }\n\n  singleSelectorBounce(selector, div) {\n    const container = this.container,\n          query = document.querySelectorAll(selector);\n\n    if (!query.length) {\n      return;\n    }\n\n    query.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            radius = elem.offsetWidth / 2 * pxRatio,\n            tolerance = 10 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, radius + tolerance) : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n      this.processBounce(pos, radius, area);\n    });\n  }\n\n  processBounce(position, radius, area) {\n    const query = this.container.particles.quadTree.query(area, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      if (area instanceof Circle) {\n        circleBounce(circleBounceDataFromParticle(particle), {\n          position,\n          radius,\n          mass: radius ** 2 * Math.PI / 2,\n          velocity: Vector.origin,\n          factor: Vector.origin\n        });\n      } else if (area instanceof Rectangle) {\n        rectBounce(particle, calculateBounds(position, radius));\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-interaction-external-bounce/esm/Bouncer.js"],"names":["Circle","ExternalInteractorBase","Rectangle","Vector","calculateBounds","circleBounce","circleBounceDataFromParticle","divModeExecute","isDivModeEnabled","isInArray","mouseMoveEvent","rectBounce","Bouncer","constructor","container","isEnabled","particle","_a","options","actualOptions","mouse","interactivity","events","divs","onDiv","position","onHover","enable","mode","interact","mouseMoveStatus","status","hoverEnabled","hoverMode","processMouseBounce","selector","div","singleSelectorBounce","clear","reset","pxRatio","retina","pixelRatio","tolerance","mousePos","radius","bounceModeDistance","processBounce","x","y","query","document","querySelectorAll","length","forEach","item","elem","pos","offsetLeft","offsetWidth","offsetTop","offsetHeight","area","type","particles","quadTree","p","mass","Math","PI","velocity","origin","factor"],"mappings":"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","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce, } from \"tsparticles-engine\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv;\n        return ((mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode)) ||\n            isDivModeEnabled(\"bounce\", divs));\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n            this.processMouseBounce();\n        }\n        else {\n            divModeExecute(\"bounce\", divs, (selector, div) => this.singleSelectorBounce(selector, div));\n        }\n    }\n    clear() {\n    }\n    reset() {\n    }\n    processMouseBounce() {\n        const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n        if (mousePos) {\n            this.processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n        }\n    }\n    singleSelectorBounce(selector, div) {\n        const container = this.container, query = document.querySelectorAll(selector);\n        if (!query.length) {\n            return;\n        }\n        query.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, radius + tolerance)\n                : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n            this.processBounce(pos, radius, area);\n        });\n    }\n    processBounce(position, radius, area) {\n        const query = this.container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            if (area instanceof Circle) {\n                circleBounce(circleBounceDataFromParticle(particle), {\n                    position,\n                    radius,\n                    mass: (radius ** 2 * Math.PI) / 2,\n                    velocity: Vector.origin,\n                    factor: Vector.origin,\n                });\n            }\n            else if (area instanceof Rectangle) {\n                rectBounce(particle, calculateBounds(position, radius));\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}