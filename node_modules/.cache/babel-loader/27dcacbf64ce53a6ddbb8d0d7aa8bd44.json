{"ast":null,"code":"import { getRangeValue } from \"tsparticles-engine\";\n\nfunction updateAngle(particle, delta) {\n  var _a, _b;\n\n  const rotate = particle.rotate;\n\n  if (!rotate) {\n    return;\n  }\n\n  const rotateOptions = particle.options.rotate,\n        rotateAnimation = rotateOptions.animation,\n        speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n        max = 2 * Math.PI,\n        decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n\n  if (!rotateAnimation.enable) {\n    return;\n  }\n\n  switch (rotate.status) {\n    case 0:\n      rotate.value += speed;\n\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n\n      break;\n\n    case 1:\n    default:\n      rotate.value -= speed;\n\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n\n      break;\n  }\n\n  if (rotate.velocity && decay !== 1) {\n    rotate.velocity *= decay;\n  }\n}\n\nexport class AngleUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const rotateOptions = particle.options.rotate;\n    particle.rotate = {\n      enable: rotateOptions.animation.enable,\n      value: getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === \"random\") {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n    }\n\n    switch (rotateDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.rotate.status = 1;\n        break;\n\n      case \"clockwise\":\n        particle.rotate.status = 0;\n        break;\n    }\n\n    const rotateAnimation = particle.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n      particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        particle.rotate.velocity *= Math.random();\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    const rotate = particle.options.rotate,\n          rotateAnimation = rotate.animation;\n    return !particle.destroyed && !particle.spawning && !rotate.path && rotateAnimation.enable;\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateAngle(particle, delta);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-updater-angle/esm/AngleUpdater.js"],"names":["getRangeValue","updateAngle","particle","delta","_a","_b","rotate","rotateOptions","options","rotateAnimation","animation","speed","velocity","factor","max","Math","PI","decay","enable","status","value","AngleUpdater","constructor","container","init","rotateDirection","direction","index","floor","random","retina","reduceFactor","sync","isEnabled","destroyed","spawning","path","update"],"mappings":"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","sourcesContent":["import { getRangeValue } from \"tsparticles-engine\";\nfunction updateAngle(particle, delta) {\n    var _a, _b;\n    const rotate = particle.rotate;\n    if (!rotate) {\n        return;\n    }\n    const rotateOptions = particle.options.rotate, rotateAnimation = rotateOptions.animation, speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor, max = 2 * Math.PI, decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case 0:\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case 1:\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class AngleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = 1;\n                break;\n            case \"clockwise\":\n                particle.rotate.status = 0;\n                break;\n        }\n        const rotateAnimation = particle.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= Math.random();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate, rotateAnimation = rotate.animation;\n        return !particle.destroyed && !particle.spawning && !rotate.path && rotateAnimation.enable;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAngle(particle, delta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}