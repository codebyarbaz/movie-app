{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { drawLinkLine as _drawLinkLine, drawLinkTriangle as _drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport var LinkInstance = /*#__PURE__*/function () {\n  function LinkInstance(container) {\n    _classCallCheck(this, LinkInstance);\n\n    this.container = container;\n  }\n\n  _createClass(LinkInstance, [{\n    key: \"particleCreated\",\n    value: function particleCreated(particle) {\n      var linkParticle = particle;\n      linkParticle.links = [];\n    }\n  }, {\n    key: \"particleDestroyed\",\n    value: function particleDestroyed(particle) {\n      var linkParticle = particle;\n      linkParticle.links = [];\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(context, particle) {\n      var _this = this;\n\n      var linkParticle = particle,\n          container = this.container,\n          particles = container.particles,\n          pOptions = particle.options;\n\n      if (linkParticle.links.length <= 0) {\n        return;\n      }\n\n      context.save();\n      var p1Links = linkParticle.links.filter(function (l) {\n        var linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n        return linkFreq <= pOptions.links.frequency;\n      });\n\n      var _iterator = _createForOfIteratorHelper(p1Links),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var link = _step.value;\n          var p2 = link.destination;\n\n          if (pOptions.links.triangles.enable) {\n            var links = p1Links.map(function (l) {\n              return l.destination;\n            }),\n                vertices = p2.links.filter(function (t) {\n              var linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n              return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n            });\n\n            if (vertices.length) {\n              var _iterator2 = _createForOfIteratorHelper(vertices),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var vertex = _step2.value;\n                  var p3 = vertex.destination,\n                      triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n\n                  if (triangleFreq > pOptions.links.triangles.frequency) {\n                    continue;\n                  }\n\n                  _this.drawLinkTriangle(linkParticle, link, vertex);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n\n          if (link.opacity > 0 && container.retina.linksWidth > 0) {\n            _this.drawLinkLine(linkParticle, link);\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      context.restore();\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(p1, link1, link2) {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link1.destination,\n          p3 = link2.destination,\n          triangleOptions = p1.options.links.triangles,\n          opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n\n      if (opacityTriangle <= 0) {\n        return;\n      }\n\n      container.canvas.draw(function (ctx) {\n        var pos1 = p1.getPosition();\n        var pos2 = p2.getPosition();\n        var pos3 = p3.getPosition();\n\n        if (getDistance(pos1, pos2) > container.retina.linksDistance || getDistance(pos3, pos2) > container.retina.linksDistance || getDistance(pos3, pos1) > container.retina.linksDistance) {\n          return;\n        }\n\n        var colorTriangle = rangeColorToRgb(triangleOptions.color);\n\n        if (!colorTriangle) {\n          var linksOptions = p1.options.links,\n              linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorTriangle = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorTriangle) {\n          return;\n        }\n\n        _drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n      });\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(p1, link) {\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link.destination,\n          pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n      var opacity = link.opacity;\n      container.canvas.draw(function (ctx) {\n        var _a, _b, _c;\n\n        var colorLine;\n        var twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n\n        if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n          var twinkleFreq = twinkle.frequency,\n              twinkleRgb = rangeColorToRgb(twinkle.color),\n              twinkling = Math.random() < twinkleFreq;\n\n          if (twinkling && twinkleRgb) {\n            colorLine = twinkleRgb;\n            opacity = getRangeValue(twinkle.opacity);\n          }\n        }\n\n        if (!colorLine) {\n          var linksOptions = p1.options.links,\n              linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorLine = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorLine) {\n          return;\n        }\n\n        var width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth,\n            maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : container.retina.linksDistance;\n\n        _drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n      });\n    }\n  }]);\n\n  return LinkInstance;\n}();","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"names":["drawLinkLine","drawLinkTriangle","getDistance","getLinkColor","getRangeValue","rangeColorToRgb","LinkInstance","container","particle","linkParticle","links","context","particles","pOptions","options","length","save","p1Links","filter","l","linkFreq","getLinkFrequency","destination","frequency","link","p2","triangles","enable","map","vertices","t","indexOf","vertex","p3","triangleFreq","getTriangleFrequency","opacity","retina","linksWidth","restore","p1","link1","link2","_a","actualOptions","triangleOptions","opacityTriangle","canvas","draw","ctx","pos1","getPosition","pos2","pos3","linksDistance","colorTriangle","color","linksOptions","linkColor","id","undefined","linksColors","get","linksColor","backgroundMask","composite","_b","_c","colorLine","twinkle","lines","twinkleFreq","twinkleRgb","twinkling","Math","random","width","maxDistance","size","warp","shadow"],"mappings":"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","sourcesContent":["import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n    }\n    particleCreated(particle) {\n        const linkParticle = particle;\n        linkParticle.links = [];\n    }\n    particleDestroyed(particle) {\n        const linkParticle = particle;\n        linkParticle.links = [];\n    }\n    drawParticle(context, particle) {\n        const linkParticle = particle, container = this.container, particles = container.particles, pOptions = particle.options;\n        if (linkParticle.links.length <= 0) {\n            return;\n        }\n        context.save();\n        const p1Links = linkParticle.links.filter((l) => {\n            const linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n            return linkFreq <= pOptions.links.frequency;\n        });\n        for (const link of p1Links) {\n            const p2 = link.destination;\n            if (pOptions.links.triangles.enable) {\n                const links = p1Links.map((l) => l.destination), vertices = p2.links.filter((t) => {\n                    const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n                    return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n                });\n                if (vertices.length) {\n                    for (const vertex of vertices) {\n                        const p3 = vertex.destination, triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n                        if (triangleFreq > pOptions.links.triangles.frequency) {\n                            continue;\n                        }\n                        this.drawLinkTriangle(linkParticle, link, vertex);\n                    }\n                }\n            }\n            if (link.opacity > 0 && container.retina.linksWidth > 0) {\n                this.drawLinkLine(linkParticle, link);\n            }\n        }\n        context.restore();\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a;\n        const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        if (opacityTriangle <= 0) {\n            return;\n        }\n        container.canvas.draw((ctx) => {\n            const pos1 = p1.getPosition();\n            const pos2 = p2.getPosition();\n            const pos3 = p3.getPosition();\n            if (getDistance(pos1, pos2) > container.retina.linksDistance ||\n                getDistance(pos3, pos2) > container.retina.linksDistance ||\n                getDistance(pos3, pos1) > container.retina.linksDistance) {\n                return;\n            }\n            let colorTriangle = rangeColorToRgb(triangleOptions.color);\n            if (!colorTriangle) {\n                const linksOptions = p1.options.links, linkColor = linksOptions.id !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorTriangle = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorTriangle) {\n                return;\n            }\n            drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n        });\n    }\n    drawLinkLine(p1, link) {\n        const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        let opacity = link.opacity;\n        container.canvas.draw((ctx) => {\n            var _a, _b, _c;\n            let colorLine;\n            const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n            if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n                const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = Math.random() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                    colorLine = twinkleRgb;\n                    opacity = getRangeValue(twinkle.opacity);\n                }\n            }\n            if (!colorLine) {\n                const linksOptions = p1.options.links, linkColor = linksOptions.id !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorLine = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorLine) {\n                return;\n            }\n            const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth, maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : container.retina.linksDistance;\n            drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}