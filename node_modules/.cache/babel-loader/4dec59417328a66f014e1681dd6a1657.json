{"ast":null,"code":"import { ExternalInteractorBase, drawLine, getDistance, getLinkColor, getLinkRandomColor, getStyleFromRgb, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n  context.save();\n  drawLine(context, begin, end);\n  context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n  context.lineWidth = width;\n  context.stroke();\n  context.restore();\n}\n\nfunction drawGrab(container, particle, lineColor, opacity, mousePos) {\n  container.canvas.draw(ctx => {\n    var _a;\n\n    const beginPos = particle.getPosition();\n    drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n  });\n}\n\nexport class Grabber extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n    return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n  }\n\n  clear() {}\n\n  reset() {}\n\n  async interact() {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          interactivity = options.interactivity;\n\n    if (!interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent) {\n      return;\n    }\n\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const distance = container.retina.grabModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      const pos = particle.getPosition(),\n            pointDistance = getDistance(pos, mousePos);\n\n      if (pointDistance > distance) {\n        continue;\n      }\n\n      const grabLineOptions = interactivity.modes.grab.links,\n            lineOpacity = grabLineOptions.opacity,\n            opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n      if (opacityLine <= 0) {\n        continue;\n      }\n\n      const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n      if (!container.particles.grabLineColor) {\n        const linksOptions = options.interactivity.modes.grab.links;\n        container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n      }\n\n      const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n      if (!colorLine) {\n        return;\n      }\n\n      drawGrab(container, particle, colorLine, opacityLine, mousePos);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-interaction-external-grab/esm/Grabber.js"],"names":["ExternalInteractorBase","drawLine","getDistance","getLinkColor","getLinkRandomColor","getStyleFromRgb","isInArray","mouseMoveEvent","drawGrabLine","context","width","begin","end","colorLine","opacity","save","strokeStyle","lineWidth","stroke","restore","drawGrab","container","particle","lineColor","mousePos","canvas","draw","ctx","_a","beginPos","getPosition","retina","linksWidth","Grabber","constructor","isEnabled","mouse","interactivity","events","actualOptions","onHover","enable","position","mode","clear","reset","interact","options","status","distance","grabModeDistance","query","particles","quadTree","queryCircle","p","pos","pointDistance","grabLineOptions","modes","grab","links","lineOpacity","opacityLine","optColor","color","grabLineColor","linksOptions","blink","consent","undefined"],"mappings":"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","sourcesContent":["import { ExternalInteractorBase, drawLine, getDistance, getLinkColor, getLinkRandomColor, getStyleFromRgb, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    context.save();\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n    context.restore();\n}\nfunction drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        var _a;\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    });\n}\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    clear() {\n    }\n    reset() {\n    }\n    async interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n            if (!container.particles.grabLineColor) {\n                const linksOptions = options.interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                return;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}