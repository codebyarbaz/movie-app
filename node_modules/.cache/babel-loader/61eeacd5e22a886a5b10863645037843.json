{"ast":null,"code":"import { Wobble } from \"./Options/Classes/Wobble\";\nimport { getRangeValue } from \"tsparticles-engine\";\n\nfunction updateWobble(particle, delta) {\n  var _a;\n\n  const wobble = particle.options.wobble;\n\n  if (!(wobble === null || wobble === void 0 ? void 0 : wobble.enable) || !particle.wobble) {\n    return;\n  }\n\n  const angleSpeed = particle.wobble.angleSpeed * delta.factor,\n        moveSpeed = particle.wobble.moveSpeed * delta.factor,\n        distance = moveSpeed * (((_a = particle.retina.wobbleDistance) !== null && _a !== void 0 ? _a : 0) * delta.factor) / (1000 / 60),\n        max = 2 * Math.PI;\n  particle.wobble.angle += angleSpeed;\n\n  if (particle.wobble.angle > max) {\n    particle.wobble.angle -= max;\n  }\n\n  particle.position.x += distance * Math.cos(particle.wobble.angle);\n  particle.position.y += distance * Math.abs(Math.sin(particle.wobble.angle));\n}\n\nexport class WobbleUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    var _a;\n\n    const wobbleOpt = particle.options.wobble;\n\n    if (wobbleOpt === null || wobbleOpt === void 0 ? void 0 : wobbleOpt.enable) {\n      particle.wobble = {\n        angle: Math.random() * Math.PI * 2,\n        angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n        moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10\n      };\n    } else {\n      particle.wobble = {\n        angle: 0,\n        angleSpeed: 0,\n        moveSpeed: 0\n      };\n    }\n\n    particle.retina.wobbleDistance = getRangeValue((_a = wobbleOpt === null || wobbleOpt === void 0 ? void 0 : wobbleOpt.distance) !== null && _a !== void 0 ? _a : 0) * this.container.retina.pixelRatio;\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    return !particle.destroyed && !particle.spawning && !!((_a = particle.options.wobble) === null || _a === void 0 ? void 0 : _a.enable);\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateWobble(particle, delta);\n  }\n\n  loadOptions(options) {\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      if (!(source === null || source === void 0 ? void 0 : source.wobble)) {\n        continue;\n      }\n\n      if (!options.wobble) {\n        options.wobble = new Wobble();\n      }\n\n      options.wobble.load(source.wobble);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-updater-wobble/esm/WobbleUpdater.js"],"names":["Wobble","getRangeValue","updateWobble","particle","delta","_a","wobble","options","enable","angleSpeed","factor","moveSpeed","distance","retina","wobbleDistance","max","Math","PI","angle","position","x","cos","y","abs","sin","WobbleUpdater","constructor","container","init","wobbleOpt","random","speed","move","pixelRatio","isEnabled","destroyed","spawning","update","loadOptions","sources","source","load"],"mappings":"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","sourcesContent":["import { Wobble } from \"./Options/Classes/Wobble\";\nimport { getRangeValue } from \"tsparticles-engine\";\nfunction updateWobble(particle, delta) {\n    var _a;\n    const wobble = particle.options.wobble;\n    if (!(wobble === null || wobble === void 0 ? void 0 : wobble.enable) || !particle.wobble) {\n        return;\n    }\n    const angleSpeed = particle.wobble.angleSpeed * delta.factor, moveSpeed = particle.wobble.moveSpeed * delta.factor, distance = (moveSpeed * (((_a = particle.retina.wobbleDistance) !== null && _a !== void 0 ? _a : 0) * delta.factor)) / (1000 / 60), max = 2 * Math.PI;\n    particle.wobble.angle += angleSpeed;\n    if (particle.wobble.angle > max) {\n        particle.wobble.angle -= max;\n    }\n    particle.position.x += distance * Math.cos(particle.wobble.angle);\n    particle.position.y += distance * Math.abs(Math.sin(particle.wobble.angle));\n}\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        var _a;\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt === null || wobbleOpt === void 0 ? void 0 : wobbleOpt.enable) {\n            particle.wobble = {\n                angle: Math.random() * Math.PI * 2,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance = getRangeValue((_a = wobbleOpt === null || wobbleOpt === void 0 ? void 0 : wobbleOpt.distance) !== null && _a !== void 0 ? _a : 0) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        var _a;\n        return !particle.destroyed && !particle.spawning && !!((_a = particle.options.wobble) === null || _a === void 0 ? void 0 : _a.enable);\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n    loadOptions(options, ...sources) {\n        for (const source of sources) {\n            if (!(source === null || source === void 0 ? void 0 : source.wobble)) {\n                continue;\n            }\n            if (!options.wobble) {\n                options.wobble = new Wobble();\n            }\n            options.wobble.load(source.wobble);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}