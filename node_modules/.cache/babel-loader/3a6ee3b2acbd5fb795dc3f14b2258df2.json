{"ast":null,"code":"import _classCallCheck from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport var LifeUpdater = /*#__PURE__*/function () {\n  function LifeUpdater(container) {\n    _classCallCheck(this, LifeUpdater);\n\n    this.container = container;\n  }\n\n  _createClass(LifeUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var container = this.container,\n          particlesOptions = particle.options,\n          lifeOptions = particlesOptions.life;\n\n      if (!lifeOptions) {\n        return;\n      }\n\n      particle.life = {\n        delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: lifeOptions.count\n      };\n\n      if (particle.life.duration <= 0) {\n        particle.life.duration = -1;\n      }\n\n      if (particle.life.count <= 0) {\n        particle.life.count = -1;\n      }\n\n      if (particle.life) {\n        particle.spawning = particle.life.delay > 0;\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed;\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle) || !particle.life) {\n        return;\n      }\n\n      var life = particle.life;\n      var justSpawned = false;\n\n      if (particle.spawning) {\n        life.delayTime += delta.value;\n\n        if (life.delayTime >= particle.life.delay) {\n          justSpawned = true;\n          particle.spawning = false;\n          life.delayTime = 0;\n          life.time = 0;\n        } else {\n          return;\n        }\n      }\n\n      if (life.duration === -1) {\n        return;\n      }\n\n      if (particle.spawning) {\n        return;\n      }\n\n      if (justSpawned) {\n        life.time = 0;\n      } else {\n        life.time += delta.value;\n      }\n\n      if (life.time < life.duration) {\n        return;\n      }\n\n      life.time = 0;\n\n      if (particle.life.count > 0) {\n        particle.life.count--;\n      }\n\n      if (particle.life.count === 0) {\n        particle.destroy();\n        return;\n      }\n\n      var canvasSize = this.container.canvas.size,\n          widthRange = setRangeValue(0, canvasSize.width),\n          heightRange = setRangeValue(0, canvasSize.width);\n      particle.position.x = randomInRange(widthRange);\n      particle.position.y = randomInRange(heightRange);\n      particle.spawning = true;\n      life.delayTime = 0;\n      life.time = 0;\n      particle.reset();\n      var lifeOptions = particle.options.life;\n\n      if (lifeOptions) {\n        life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n        life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n      }\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n\n        if (!(source === null || source === void 0 ? void 0 : source.life)) {\n          continue;\n        }\n\n        if (!options.life) {\n          options.life = new Life();\n        }\n\n        options.life.load(source.life);\n      }\n    }\n  }]);\n\n  return LifeUpdater;\n}();","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-updater-life/esm/LifeUpdater.js"],"names":["getRangeValue","randomInRange","setRangeValue","Life","LifeUpdater","container","particle","particlesOptions","options","lifeOptions","life","delay","retina","reduceFactor","value","sync","Math","random","delayTime","duration","time","count","spawning","destroyed","delta","isEnabled","justSpawned","destroy","canvasSize","canvas","size","widthRange","width","heightRange","position","x","y","reset","sources","source","load"],"mappings":"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","sourcesContent":["import { getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n    loadOptions(options, ...sources) {\n        for (const source of sources) {\n            if (!(source === null || source === void 0 ? void 0 : source.life)) {\n                continue;\n            }\n            if (!options.life) {\n                options.life = new Life();\n            }\n            options.life.load(source.life);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}