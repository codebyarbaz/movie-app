{"ast":null,"code":"import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport class LinkInstance {\n  constructor(container) {\n    this.container = container;\n  }\n\n  particleCreated(particle) {\n    const linkParticle = particle;\n    linkParticle.links = [];\n  }\n\n  particleDestroyed(particle) {\n    const linkParticle = particle;\n    linkParticle.links = [];\n  }\n\n  drawParticle(context, particle) {\n    const linkParticle = particle,\n          container = this.container,\n          particles = container.particles,\n          pOptions = particle.options;\n\n    if (linkParticle.links.length <= 0) {\n      return;\n    }\n\n    context.save();\n    const p1Links = linkParticle.links.filter(l => {\n      const linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n      return linkFreq <= pOptions.links.frequency;\n    });\n\n    for (const link of p1Links) {\n      const p2 = link.destination;\n\n      if (pOptions.links.triangles.enable) {\n        const links = p1Links.map(l => l.destination),\n              vertices = p2.links.filter(t => {\n          const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n          return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n        });\n\n        if (vertices.length) {\n          for (const vertex of vertices) {\n            const p3 = vertex.destination,\n                  triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n\n            if (triangleFreq > pOptions.links.triangles.frequency) {\n              continue;\n            }\n\n            this.drawLinkTriangle(linkParticle, link, vertex);\n          }\n        }\n      }\n\n      if (link.opacity > 0 && container.retina.linksWidth > 0) {\n        this.drawLinkLine(linkParticle, link);\n      }\n    }\n\n    context.restore();\n  }\n\n  drawLinkTriangle(p1, link1, link2) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          p2 = link1.destination,\n          p3 = link2.destination,\n          triangleOptions = p1.options.links.triangles,\n          opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n\n    if (opacityTriangle <= 0) {\n      return;\n    }\n\n    container.canvas.draw(ctx => {\n      const pos1 = p1.getPosition();\n      const pos2 = p2.getPosition();\n      const pos3 = p3.getPosition();\n\n      if (getDistance(pos1, pos2) > container.retina.linksDistance || getDistance(pos3, pos2) > container.retina.linksDistance || getDistance(pos3, pos1) > container.retina.linksDistance) {\n        return;\n      }\n\n      let colorTriangle = rangeColorToRgb(triangleOptions.color);\n\n      if (!colorTriangle) {\n        const linksOptions = p1.options.links,\n              linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorTriangle = getLinkColor(p1, p2, linkColor);\n      }\n\n      if (!colorTriangle) {\n        return;\n      }\n\n      drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n    });\n  }\n\n  drawLinkLine(p1, link) {\n    const container = this.container,\n          options = container.actualOptions,\n          p2 = link.destination,\n          pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n    let opacity = link.opacity;\n    container.canvas.draw(ctx => {\n      var _a, _b, _c;\n\n      let colorLine;\n      const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n\n      if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n        const twinkleFreq = twinkle.frequency,\n              twinkleRgb = rangeColorToRgb(twinkle.color),\n              twinkling = Math.random() < twinkleFreq;\n\n        if (twinkling && twinkleRgb) {\n          colorLine = twinkleRgb;\n          opacity = getRangeValue(twinkle.opacity);\n        }\n      }\n\n      if (!colorLine) {\n        const linksOptions = p1.options.links,\n              linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorLine = getLinkColor(p1, p2, linkColor);\n      }\n\n      if (!colorLine) {\n        return;\n      }\n\n      const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth,\n            maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : container.retina.linksDistance;\n      drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"names":["drawLinkLine","drawLinkTriangle","getDistance","getLinkColor","getRangeValue","rangeColorToRgb","LinkInstance","constructor","container","particleCreated","particle","linkParticle","links","particleDestroyed","drawParticle","context","particles","pOptions","options","length","save","p1Links","filter","l","linkFreq","getLinkFrequency","destination","frequency","link","p2","triangles","enable","map","vertices","t","indexOf","vertex","p3","triangleFreq","getTriangleFrequency","opacity","retina","linksWidth","restore","p1","link1","link2","_a","actualOptions","triangleOptions","opacityTriangle","canvas","draw","ctx","pos1","getPosition","pos2","pos3","linksDistance","colorTriangle","color","linksOptions","linkColor","id","undefined","linksColors","get","linksColor","backgroundMask","composite","_b","_c","colorLine","twinkle","lines","twinkleFreq","twinkleRgb","twinkling","Math","random","width","maxDistance","size","warp","shadow"],"mappings":"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","sourcesContent":["import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n    }\n    particleCreated(particle) {\n        const linkParticle = particle;\n        linkParticle.links = [];\n    }\n    particleDestroyed(particle) {\n        const linkParticle = particle;\n        linkParticle.links = [];\n    }\n    drawParticle(context, particle) {\n        const linkParticle = particle, container = this.container, particles = container.particles, pOptions = particle.options;\n        if (linkParticle.links.length <= 0) {\n            return;\n        }\n        context.save();\n        const p1Links = linkParticle.links.filter((l) => {\n            const linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n            return linkFreq <= pOptions.links.frequency;\n        });\n        for (const link of p1Links) {\n            const p2 = link.destination;\n            if (pOptions.links.triangles.enable) {\n                const links = p1Links.map((l) => l.destination), vertices = p2.links.filter((t) => {\n                    const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n                    return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n                });\n                if (vertices.length) {\n                    for (const vertex of vertices) {\n                        const p3 = vertex.destination, triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n                        if (triangleFreq > pOptions.links.triangles.frequency) {\n                            continue;\n                        }\n                        this.drawLinkTriangle(linkParticle, link, vertex);\n                    }\n                }\n            }\n            if (link.opacity > 0 && container.retina.linksWidth > 0) {\n                this.drawLinkLine(linkParticle, link);\n            }\n        }\n        context.restore();\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a;\n        const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        if (opacityTriangle <= 0) {\n            return;\n        }\n        container.canvas.draw((ctx) => {\n            const pos1 = p1.getPosition();\n            const pos2 = p2.getPosition();\n            const pos3 = p3.getPosition();\n            if (getDistance(pos1, pos2) > container.retina.linksDistance ||\n                getDistance(pos3, pos2) > container.retina.linksDistance ||\n                getDistance(pos3, pos1) > container.retina.linksDistance) {\n                return;\n            }\n            let colorTriangle = rangeColorToRgb(triangleOptions.color);\n            if (!colorTriangle) {\n                const linksOptions = p1.options.links, linkColor = linksOptions.id !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorTriangle = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorTriangle) {\n                return;\n            }\n            drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n        });\n    }\n    drawLinkLine(p1, link) {\n        const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        let opacity = link.opacity;\n        container.canvas.draw((ctx) => {\n            var _a, _b, _c;\n            let colorLine;\n            const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n            if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n                const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = Math.random() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                    colorLine = twinkleRgb;\n                    opacity = getRangeValue(twinkle.opacity);\n                }\n            }\n            if (!colorLine) {\n                const linksOptions = p1.options.links, linkColor = linksOptions.id !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorLine = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorLine) {\n                return;\n            }\n            const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth, maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : container.retina.linksDistance;\n            drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}