{"ast":null,"code":"import _classCallCheck from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRangeValue, getStyleFromHsl, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport var TwinkleUpdater = /*#__PURE__*/function () {\n  function TwinkleUpdater() {\n    _classCallCheck(this, TwinkleUpdater);\n  }\n\n  _createClass(TwinkleUpdater, [{\n    key: \"getColorStyles\",\n    value: function getColorStyles(particle, context, radius, opacity) {\n      var pOptions = particle.options,\n          twinkleOptions = pOptions.twinkle;\n\n      if (!twinkleOptions) {\n        return {};\n      }\n\n      var twinkle = twinkleOptions.particles,\n          twinkling = twinkle.enable && Math.random() < twinkle.frequency,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate),\n          twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity,\n          twinkleRgb = rangeColorToHsl(twinkle.color),\n          twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined,\n          res = {},\n          needsTwinkle = twinkling && twinkleStyle;\n      res.fill = needsTwinkle ? twinkleStyle : undefined;\n      res.stroke = needsTwinkle ? twinkleStyle : undefined;\n      return res;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var pOptions = particle.options,\n          twinkleOptions = pOptions.twinkle;\n\n      if (!twinkleOptions) {\n        return false;\n      }\n\n      return twinkleOptions.particles.enable;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {}\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n\n        if (!(source === null || source === void 0 ? void 0 : source.twinkle)) {\n          continue;\n        }\n\n        if (!options.twinkle) {\n          options.twinkle = new Twinkle();\n        }\n\n        options.twinkle.load(source.twinkle);\n      }\n    }\n  }]);\n\n  return TwinkleUpdater;\n}();","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-updater-twinkle/esm/TwinkleUpdater.js"],"names":["getRangeValue","getStyleFromHsl","rangeColorToHsl","Twinkle","TwinkleUpdater","particle","context","radius","opacity","pOptions","options","twinkleOptions","twinkle","particles","twinkling","enable","Math","random","frequency","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","twinkleRgb","color","twinkleStyle","undefined","res","needsTwinkle","fill","stroke","sources","source","load"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,eAAxB,EAAyCC,eAAzC,QAAgE,oBAAhE;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,WAAaC,cAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACI,wBAAeC,QAAf,EAAyBC,OAAzB,EAAkCC,MAAlC,EAA0CC,OAA1C,EAAmD;AAC/C,UAAMC,QAAQ,GAAGJ,QAAQ,CAACK,OAA1B;AAAA,UAAmCC,cAAc,GAAGF,QAAQ,CAACG,OAA7D;;AACA,UAAI,CAACD,cAAL,EAAqB;AACjB,eAAO,EAAP;AACH;;AACD,UAAMC,OAAO,GAAGD,cAAc,CAACE,SAA/B;AAAA,UAA0CC,SAAS,GAAGF,OAAO,CAACG,MAAR,IAAkBC,IAAI,CAACC,MAAL,KAAgBL,OAAO,CAACM,SAAhG;AAAA,UAA2GC,aAAa,GAAGd,QAAQ,CAACK,OAAT,CAAiBU,MAA5I;AAAA,UAAoJC,cAAc,YAAI,IAAIhB,QAAQ,CAACiB,YAAjB,EAAkCH,aAAa,CAACI,WAAhD,CAAlK;AAAA,UAA+NC,gBAAgB,GAAGV,SAAS,GAAGd,aAAa,CAACY,OAAO,CAACJ,OAAT,CAAb,GAAiCa,cAApC,GAAqDb,OAAhT;AAAA,UAAyTiB,UAAU,GAAGvB,eAAe,CAACU,OAAO,CAACc,KAAT,CAArV;AAAA,UAAsWC,YAAY,GAAGF,UAAU,GAAGxB,eAAe,CAACwB,UAAD,EAAaD,gBAAb,CAAlB,GAAmDI,SAAlb;AAAA,UAA6bC,GAAG,GAAG,EAAnc;AAAA,UAAucC,YAAY,GAAGhB,SAAS,IAAIa,YAAne;AACAE,MAAAA,GAAG,CAACE,IAAJ,GAAWD,YAAY,GAAGH,YAAH,GAAkBC,SAAzC;AACAC,MAAAA,GAAG,CAACG,MAAJ,GAAaF,YAAY,GAAGH,YAAH,GAAkBC,SAA3C;AACA,aAAOC,GAAP;AACH;AAVL;AAAA;AAAA,WAWI,gBAAO,CACN;AAZL;AAAA;AAAA,WAaI,mBAAUxB,QAAV,EAAoB;AAChB,UAAMI,QAAQ,GAAGJ,QAAQ,CAACK,OAA1B;AAAA,UAAmCC,cAAc,GAAGF,QAAQ,CAACG,OAA7D;;AACA,UAAI,CAACD,cAAL,EAAqB;AACjB,eAAO,KAAP;AACH;;AACD,aAAOA,cAAc,CAACE,SAAf,CAAyBE,MAAhC;AACH;AAnBL;AAAA;AAAA,WAoBI,kBAAS,CACR;AArBL;AAAA;AAAA,WAsBI,qBAAYL,OAAZ,EAAiC;AAAA,wCAATuB,OAAS;AAATA,QAAAA,OAAS;AAAA;;AAC7B,kCAAqBA,OAArB,8BAA8B;AAAzB,YAAMC,MAAM,eAAZ;;AACD,YAAI,EAAEA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACtB,OAAzD,CAAJ,EAAuE;AACnE;AACH;;AACD,YAAI,CAACF,OAAO,CAACE,OAAb,EAAsB;AAClBF,UAAAA,OAAO,CAACE,OAAR,GAAkB,IAAIT,OAAJ,EAAlB;AACH;;AACDO,QAAAA,OAAO,CAACE,OAAR,CAAgBuB,IAAhB,CAAqBD,MAAM,CAACtB,OAA5B;AACH;AACJ;AAhCL;;AAAA;AAAA","sourcesContent":["import { getRangeValue, getStyleFromHsl, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && Math.random() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    update() {\n    }\n    loadOptions(options, ...sources) {\n        for (const source of sources) {\n            if (!(source === null || source === void 0 ? void 0 : source.twinkle)) {\n                continue;\n            }\n            if (!options.twinkle) {\n                options.twinkle = new Twinkle();\n            }\n            options.twinkle.load(source.twinkle);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}