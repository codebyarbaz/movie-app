{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/hp/Downloads/movies/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Emitters_engine;\n\nimport { arrayRandomIndex, deepExtend, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport var Emitters = /*#__PURE__*/function () {\n  function Emitters(engine, container) {\n    var _this = this;\n\n    _classCallCheck(this, Emitters);\n\n    this.container = container;\n\n    _Emitters_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Emitters_engine, engine, \"f\");\n\n    this.array = [];\n    this.emitters = [];\n    this.interactivityEmitters = {\n      random: {\n        count: 1,\n        enable: false\n      },\n      value: []\n    };\n\n    container.getEmitter = function (idxOrName) {\n      return idxOrName === undefined || typeof idxOrName === \"number\" ? _this.array[idxOrName || 0] : _this.array.find(function (t) {\n        return t.name === idxOrName;\n      });\n    };\n\n    container.addEmitter = function (options, position) {\n      return _this.addEmitter(options, position);\n    };\n\n    container.removeEmitter = function (idxOrName) {\n      var emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        _this.removeEmitter(emitter);\n      }\n    };\n\n    container.playEmitter = function (idxOrName) {\n      var emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPlay();\n      }\n    };\n\n    container.pauseEmitter = function (idxOrName) {\n      var emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPause();\n      }\n    };\n  }\n\n  _createClass(Emitters, [{\n    key: \"init\",\n    value: function init(options) {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n\n      if (!options) {\n        return;\n      }\n\n      if (options.emitters) {\n        if (options.emitters instanceof Array) {\n          this.emitters = options.emitters.map(function (s) {\n            var tmp = new Emitter();\n            tmp.load(s);\n            return tmp;\n          });\n        } else {\n          if (this.emitters instanceof Array) {\n            this.emitters = new Emitter();\n          }\n\n          this.emitters.load(options.emitters);\n        }\n      }\n\n      var interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n\n      if (interactivityEmitters) {\n        if (interactivityEmitters instanceof Array) {\n          this.interactivityEmitters = {\n            random: {\n              count: 1,\n              enable: true\n            },\n            value: interactivityEmitters.map(function (s) {\n              var tmp = new Emitter();\n              tmp.load(s);\n              return tmp;\n            })\n          };\n        } else {\n          var emitterMode = interactivityEmitters;\n\n          if (emitterMode.value !== undefined) {\n            if (emitterMode.value instanceof Array) {\n              this.interactivityEmitters = {\n                random: {\n                  count: (_c = this.interactivityEmitters.random.count) !== null && _c !== void 0 ? _c : 1,\n                  enable: (_d = this.interactivityEmitters.random.enable) !== null && _d !== void 0 ? _d : false\n                },\n                value: emitterMode.value.map(function (s) {\n                  var tmp = new Emitter();\n                  tmp.load(s);\n                  return tmp;\n                })\n              };\n            } else {\n              var tmp = new Emitter();\n              tmp.load(emitterMode.value);\n              this.interactivityEmitters = {\n                random: {\n                  count: (_e = this.interactivityEmitters.random.count) !== null && _e !== void 0 ? _e : 1,\n                  enable: (_f = this.interactivityEmitters.random.enable) !== null && _f !== void 0 ? _f : false\n                },\n                value: tmp\n              };\n            }\n          } else {\n            var _tmp = new Emitter();\n\n            _tmp.load(interactivityEmitters);\n\n            this.interactivityEmitters = {\n              random: {\n                count: (_g = this.interactivityEmitters.random.count) !== null && _g !== void 0 ? _g : 1,\n                enable: (_h = this.interactivityEmitters.random.enable) !== null && _h !== void 0 ? _h : false\n              },\n              value: _tmp\n            };\n          }\n        }\n      }\n\n      if (this.emitters instanceof Array) {\n        var _iterator = _createForOfIteratorHelper(this.emitters),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var emitterOptions = _step.value;\n            this.addEmitter(emitterOptions);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        this.addEmitter(this.emitters);\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      var _iterator2 = _createForOfIteratorHelper(this.array),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var emitter = _step2.value;\n          emitter.play();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      var _iterator3 = _createForOfIteratorHelper(this.array),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var emitter = _step3.value;\n          emitter.pause();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.array = [];\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var _iterator4 = _createForOfIteratorHelper(this.array),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var emitter = _step4.value;\n          emitter.update(delta);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"handleClickMode\",\n    value: function handleClickMode(mode) {\n      var emitterOptions = this.emitters,\n          modeEmitters = this.interactivityEmitters;\n\n      if (mode === \"emitter\") {\n        var emittersModeOptions;\n\n        if (modeEmitters && modeEmitters.value instanceof Array) {\n          if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n            emittersModeOptions = [];\n            var usedIndexes = [];\n\n            for (var i = 0; i < modeEmitters.random.count; i++) {\n              var idx = arrayRandomIndex(modeEmitters.value);\n\n              if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                i--;\n                continue;\n              }\n\n              usedIndexes.push(idx);\n              emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n            }\n          } else {\n            emittersModeOptions = modeEmitters.value;\n          }\n        } else {\n          emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n        }\n\n        var emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions,\n            ePosition = this.container.interactivity.mouse.clickPosition;\n\n        if (emittersOptions instanceof Array) {\n          var _iterator5 = _createForOfIteratorHelper(emittersOptions),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _emitterOptions = _step5.value;\n              this.addEmitter(_emitterOptions, ePosition);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        } else {\n          this.addEmitter(deepExtend({}, emittersOptions), ePosition);\n        }\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _iterator6 = _createForOfIteratorHelper(this.array),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var emitter = _step6.value;\n          emitter.resize();\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"addEmitter\",\n    value: function addEmitter(options, position) {\n      var emitterOptions = new Emitter();\n      emitterOptions.load(options);\n      var emitter = new EmitterInstance(__classPrivateFieldGet(this, _Emitters_engine, \"f\"), this, this.container, emitterOptions, position);\n      this.array.push(emitter);\n      return emitter;\n    }\n  }, {\n    key: \"removeEmitter\",\n    value: function removeEmitter(emitter) {\n      var index = this.array.indexOf(emitter);\n\n      if (index >= 0) {\n        this.array.splice(index, 1);\n      }\n    }\n  }]);\n\n  return Emitters;\n}();\n_Emitters_engine = new WeakMap();","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-plugin-emitters/esm/Emitters.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Emitters_engine","arrayRandomIndex","deepExtend","itemFromArray","Emitter","EmitterInstance","Emitters","engine","container","array","emitters","interactivityEmitters","random","count","enable","getEmitter","idxOrName","undefined","find","t","name","addEmitter","options","position","removeEmitter","emitter","playEmitter","externalPlay","pauseEmitter","externalPause","_a","_b","_c","_d","_e","_f","_g","_h","Array","map","s","tmp","load","interactivity","modes","emitterMode","emitterOptions","play","pause","delta","update","mode","modeEmitters","emittersModeOptions","length","usedIndexes","i","idx","includes","push","emittersOptions","ePosition","mouse","clickPosition","resize","index","indexOf","splice","WeakMap"],"mappings":"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","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Emitters_engine;\nimport { arrayRandomIndex, deepExtend, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        _Emitters_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Emitters_engine, engine, \"f\");\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    init(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (!options) {\n            return;\n        }\n        if (options.emitters) {\n            if (options.emitters instanceof Array) {\n                this.emitters = options.emitters.map((s) => {\n                    const tmp = new Emitter();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.emitters instanceof Array) {\n                    this.emitters = new Emitter();\n                }\n                this.emitters.load(options.emitters);\n            }\n        }\n        const interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n        if (interactivityEmitters) {\n            if (interactivityEmitters instanceof Array) {\n                this.interactivityEmitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (emitterMode.value instanceof Array) {\n                        this.interactivityEmitters = {\n                            random: {\n                                count: (_c = this.interactivityEmitters.random.count) !== null && _c !== void 0 ? _c : 1,\n                                enable: (_d = this.interactivityEmitters.random.enable) !== null && _d !== void 0 ? _d : false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        this.interactivityEmitters = {\n                            random: {\n                                count: (_e = this.interactivityEmitters.random.count) !== null && _e !== void 0 ? _e : 1,\n                                enable: (_f = this.interactivityEmitters.random.enable) !== null && _f !== void 0 ? _f : false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const tmp = new Emitter();\n                    tmp.load(interactivityEmitters);\n                    this.interactivityEmitters = {\n                        random: {\n                            count: (_g = this.interactivityEmitters.random.count) !== null && _g !== void 0 ? _g : 1,\n                            enable: (_h = this.interactivityEmitters.random.enable) !== null && _h !== void 0 ? _h : false,\n                        },\n                        value: tmp,\n                    };\n                }\n            }\n        }\n        if (this.emitters instanceof Array) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode === \"emitter\") {\n            let emittersModeOptions;\n            if (modeEmitters && modeEmitters.value instanceof Array) {\n                if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                    emittersModeOptions = [];\n                    const usedIndexes = [];\n                    for (let i = 0; i < modeEmitters.random.count; i++) {\n                        const idx = arrayRandomIndex(modeEmitters.value);\n                        if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                            i--;\n                            continue;\n                        }\n                        usedIndexes.push(idx);\n                        emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                    }\n                }\n                else {\n                    emittersModeOptions = modeEmitters.value;\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n            }\n            const emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n            if (emittersOptions instanceof Array) {\n                for (const emitterOptions of emittersOptions) {\n                    this.addEmitter(emitterOptions, ePosition);\n                }\n            }\n            else {\n                this.addEmitter(deepExtend({}, emittersOptions), ePosition);\n            }\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(__classPrivateFieldGet(this, _Emitters_engine, \"f\"), this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n}\n_Emitters_engine = new WeakMap();\n"]},"metadata":{},"sourceType":"module"}