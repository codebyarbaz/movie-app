{"ast":null,"code":"import { Circle } from \"./Circle\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n  constructor(rectangle, capacity) {\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n  }\n\n  insert(point) {\n    var _a, _b, _c, _d, _e;\n\n    if (!this.rectangle.contains(point.position)) {\n      return false;\n    }\n\n    if (this.points.length < this.capacity) {\n      this.points.push(point);\n      return true;\n    }\n\n    if (!this.divided) {\n      this.subdivide();\n    }\n\n    return (_e = ((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n  }\n\n  queryCircle(position, radius, check) {\n    return this.query(new Circle(position.x, position.y, radius), check);\n  }\n\n  queryCircleWarp(position, radius, containerOrSize, check) {\n    const container = containerOrSize,\n          size = containerOrSize;\n    return this.query(new CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size), check);\n  }\n\n  queryRectangle(position, size, check) {\n    return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n  }\n\n  query(range, check, found) {\n    var _a, _b, _c, _d;\n\n    const res = found !== null && found !== void 0 ? found : [];\n\n    if (!range.intersects(this.rectangle)) {\n      return [];\n    }\n\n    for (const p of this.points) {\n      if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius() && (!check || check(p.particle))) {\n        continue;\n      }\n\n      res.push(p.particle);\n    }\n\n    if (this.divided) {\n      (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, check, res);\n      (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, check, res);\n      (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, check, res);\n      (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, check, res);\n    }\n\n    return res;\n  }\n\n  subdivide() {\n    const x = this.rectangle.position.x,\n          y = this.rectangle.position.y,\n          w = this.rectangle.size.width,\n          h = this.rectangle.size.height,\n          capacity = this.capacity;\n    this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n    this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n    this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n    this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n    this.divided = true;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-engine/esm/Core/Utils/QuadTree.js"],"names":["Circle","CircleWarp","Rectangle","getDistance","QuadTree","constructor","rectangle","capacity","points","divided","insert","point","_a","_b","_c","_d","_e","contains","position","length","push","subdivide","northEast","northWest","southEast","southWest","queryCircle","radius","check","query","x","y","queryCircleWarp","containerOrSize","container","size","canvas","undefined","queryRectangle","width","height","range","found","res","intersects","p","particle","getRadius","w","h"],"mappings":"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","sourcesContent":["import { Circle } from \"./Circle\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this.points = [];\n        this.divided = false;\n    }\n    insert(point) {\n        var _a, _b, _c, _d, _e;\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this.points.length < this.capacity) {\n            this.points.push(point);\n            return true;\n        }\n        if (!this.divided) {\n            this.subdivide();\n        }\n        return ((_e = (((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) ||\n            ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) ||\n            ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) ||\n            ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point)))) !== null && _e !== void 0 ? _e : false);\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new Circle(position.x, position.y, radius), check);\n    }\n    queryCircleWarp(position, radius, containerOrSize, check) {\n        const container = containerOrSize, size = containerOrSize;\n        return this.query(new CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n    query(range, check, found) {\n        var _a, _b, _c, _d;\n        const res = found !== null && found !== void 0 ? found : [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this.points) {\n            if (!range.contains(p.position) &&\n                getDistance(range.position, p.position) > p.particle.getRadius() &&\n                (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this.divided) {\n            (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, check, res);\n            (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, check, res);\n            (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, check, res);\n            (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, check, res);\n        }\n        return res;\n    }\n    subdivide() {\n        const x = this.rectangle.position.x, y = this.rectangle.position.y, w = this.rectangle.size.width, h = this.rectangle.size.height, capacity = this.capacity;\n        this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n        this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n        this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n        this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n        this.divided = true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}