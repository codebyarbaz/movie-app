{"ast":null,"code":"import { getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const container = this.container,\n          particlesOptions = particle.options,\n          lifeOptions = particlesOptions.life;\n\n    if (!lifeOptions) {\n      return;\n    }\n\n    particle.life = {\n      delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: lifeOptions.count\n    };\n\n    if (particle.life.duration <= 0) {\n      particle.life.duration = -1;\n    }\n\n    if (particle.life.count <= 0) {\n      particle.life.count = -1;\n    }\n\n    if (particle.life) {\n      particle.spawning = particle.life.delay > 0;\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed;\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle) || !particle.life) {\n      return;\n    }\n\n    const life = particle.life;\n    let justSpawned = false;\n\n    if (particle.spawning) {\n      life.delayTime += delta.value;\n\n      if (life.delayTime >= particle.life.delay) {\n        justSpawned = true;\n        particle.spawning = false;\n        life.delayTime = 0;\n        life.time = 0;\n      } else {\n        return;\n      }\n    }\n\n    if (life.duration === -1) {\n      return;\n    }\n\n    if (particle.spawning) {\n      return;\n    }\n\n    if (justSpawned) {\n      life.time = 0;\n    } else {\n      life.time += delta.value;\n    }\n\n    if (life.time < life.duration) {\n      return;\n    }\n\n    life.time = 0;\n\n    if (particle.life.count > 0) {\n      particle.life.count--;\n    }\n\n    if (particle.life.count === 0) {\n      particle.destroy();\n      return;\n    }\n\n    const canvasSize = this.container.canvas.size,\n          widthRange = setRangeValue(0, canvasSize.width),\n          heightRange = setRangeValue(0, canvasSize.width);\n    particle.position.x = randomInRange(widthRange);\n    particle.position.y = randomInRange(heightRange);\n    particle.spawning = true;\n    life.delayTime = 0;\n    life.time = 0;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n\n    if (lifeOptions) {\n      life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n      life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n    }\n  }\n\n  loadOptions(options) {\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      if (!(source === null || source === void 0 ? void 0 : source.life)) {\n        continue;\n      }\n\n      if (!options.life) {\n        options.life = new Life();\n      }\n\n      options.life.load(source.life);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-updater-life/esm/LifeUpdater.js"],"names":["getRangeValue","randomInRange","setRangeValue","Life","LifeUpdater","constructor","container","init","particle","particlesOptions","options","lifeOptions","life","delay","retina","reduceFactor","value","sync","Math","random","delayTime","duration","time","count","spawning","isEnabled","destroyed","update","delta","justSpawned","destroy","canvasSize","canvas","size","widthRange","width","heightRange","position","x","y","reset","loadOptions","sources","source","load"],"mappings":"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","sourcesContent":["import { getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n    loadOptions(options, ...sources) {\n        for (const source of sources) {\n            if (!(source === null || source === void 0 ? void 0 : source.life)) {\n                continue;\n            }\n            if (!options.life) {\n                options.life = new Life();\n            }\n            options.life.load(source.life);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}