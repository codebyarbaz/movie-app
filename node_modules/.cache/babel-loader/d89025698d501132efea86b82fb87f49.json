{"ast":null,"code":"import { Range } from \"./Range\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class Circle extends Range {\n  constructor(x, y, radius) {\n    super(x, y);\n    this.radius = radius;\n  }\n\n  contains(point) {\n    return getDistance(point, this.position) <= this.radius;\n  }\n\n  intersects(range) {\n    const rect = range,\n          circle = range,\n          pos1 = this.position,\n          pos2 = range.position,\n          xDist = Math.abs(pos2.x - pos1.x),\n          yDist = Math.abs(pos2.y - pos1.y),\n          r = this.radius;\n\n    if (circle.radius !== undefined) {\n      const rSum = r + circle.radius,\n            dist = Math.sqrt(xDist * xDist + yDist + yDist);\n      return rSum > dist;\n    } else if (rect.size !== undefined) {\n      const w = rect.size.width,\n            h = rect.size.height,\n            edges = Math.pow(xDist - w, 2) + Math.pow(yDist - h, 2);\n\n      if (xDist > r + w || yDist > r + h) {\n        return false;\n      }\n\n      if (xDist <= w || yDist <= h) {\n        return true;\n      }\n\n      return edges <= r * r;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/movies/node_modules/tsparticles-engine/esm/Core/Utils/Circle.js"],"names":["Range","getDistance","Circle","constructor","x","y","radius","contains","point","position","intersects","range","rect","circle","pos1","pos2","xDist","Math","abs","yDist","r","undefined","rSum","dist","sqrt","size","w","width","h","height","edges","pow"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAO,MAAMC,MAAN,SAAqBF,KAArB,CAA2B;AAC9BG,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,MAAP,EAAe;AACtB,UAAMF,CAAN,EAASC,CAAT;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,WAAOP,WAAW,CAACO,KAAD,EAAQ,KAAKC,QAAb,CAAX,IAAqC,KAAKH,MAAjD;AACH;;AACDI,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,UAAMC,IAAI,GAAGD,KAAb;AAAA,UAAoBE,MAAM,GAAGF,KAA7B;AAAA,UAAoCG,IAAI,GAAG,KAAKL,QAAhD;AAAA,UAA0DM,IAAI,GAAGJ,KAAK,CAACF,QAAvE;AAAA,UAAiFO,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASH,IAAI,CAACX,CAAL,GAASU,IAAI,CAACV,CAAvB,CAAzF;AAAA,UAAoHe,KAAK,GAAGF,IAAI,CAACC,GAAL,CAASH,IAAI,CAACV,CAAL,GAASS,IAAI,CAACT,CAAvB,CAA5H;AAAA,UAAuJe,CAAC,GAAG,KAAKd,MAAhK;;AACA,QAAIO,MAAM,CAACP,MAAP,KAAkBe,SAAtB,EAAiC;AAC7B,YAAMC,IAAI,GAAGF,CAAC,GAAGP,MAAM,CAACP,MAAxB;AAAA,YAAgCiB,IAAI,GAAGN,IAAI,CAACO,IAAL,CAAUR,KAAK,GAAGA,KAAR,GAAgBG,KAAhB,GAAwBA,KAAlC,CAAvC;AACA,aAAOG,IAAI,GAAGC,IAAd;AACH,KAHD,MAIK,IAAIX,IAAI,CAACa,IAAL,KAAcJ,SAAlB,EAA6B;AAC9B,YAAMK,CAAC,GAAGd,IAAI,CAACa,IAAL,CAAUE,KAApB;AAAA,YAA2BC,CAAC,GAAGhB,IAAI,CAACa,IAAL,CAAUI,MAAzC;AAAA,YAAiDC,KAAK,GAAGb,IAAI,CAACc,GAAL,CAASf,KAAK,GAAGU,CAAjB,EAAoB,CAApB,IAAyBT,IAAI,CAACc,GAAL,CAASZ,KAAK,GAAGS,CAAjB,EAAoB,CAApB,CAAlF;;AACA,UAAIZ,KAAK,GAAGI,CAAC,GAAGM,CAAZ,IAAiBP,KAAK,GAAGC,CAAC,GAAGQ,CAAjC,EAAoC;AAChC,eAAO,KAAP;AACH;;AACD,UAAIZ,KAAK,IAAIU,CAAT,IAAcP,KAAK,IAAIS,CAA3B,EAA8B;AAC1B,eAAO,IAAP;AACH;;AACD,aAAOE,KAAK,IAAIV,CAAC,GAAGA,CAApB;AACH;;AACD,WAAO,KAAP;AACH;;AAzB6B","sourcesContent":["import { Range } from \"./Range\";\r\nimport { getDistance } from \"../../Utils/NumberUtils\";\r\nexport class Circle extends Range {\r\n    constructor(x, y, radius) {\r\n        super(x, y);\r\n        this.radius = radius;\r\n    }\r\n    contains(point) {\r\n        return getDistance(point, this.position) <= this.radius;\r\n    }\r\n    intersects(range) {\r\n        const rect = range, circle = range, pos1 = this.position, pos2 = range.position, xDist = Math.abs(pos2.x - pos1.x), yDist = Math.abs(pos2.y - pos1.y), r = this.radius;\r\n        if (circle.radius !== undefined) {\r\n            const rSum = r + circle.radius, dist = Math.sqrt(xDist * xDist + yDist + yDist);\r\n            return rSum > dist;\r\n        }\r\n        else if (rect.size !== undefined) {\r\n            const w = rect.size.width, h = rect.size.height, edges = Math.pow(xDist - w, 2) + Math.pow(yDist - h, 2);\r\n            if (xDist > r + w || yDist > r + h) {\r\n                return false;\r\n            }\r\n            if (xDist <= w || yDist <= h) {\r\n                return true;\r\n            }\r\n            return edges <= r * r;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}